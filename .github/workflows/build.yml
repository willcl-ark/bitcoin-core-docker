name: build

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        version:
          - '25/alpine'
          - '25'
          - '26/alpine'
          - '26'
          - '27/alpine'
          - '27'
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker build
        id: prepare
        run: |
          BITCOIN_VERSION=${{matrix.version}}
          LATEST_BITCOIN_MAJOR_VERSION=$(find . -maxdepth 1 -type d -not -path '*/\.*' -not -path '*/deprecated' | sort -n | tail -n 1 | cut -c 3-)
          PLATFORMS="linux/amd64,linux/arm64,linux/arm/v7"
          PUSH=false
          REPO=bitcoin/bitcoin
          TAGS=()
          DOCKERFILE_PATH="${{ github.workspace }}/$BITCOIN_VERSION/Dockerfile"

          # Extract the Bitcoin version from the Dockerfile
          DOCKERFILE_VERSION_LINE=$(grep 'ENV BITCOIN_VERSION=' "$DOCKERFILE_PATH")
          EXTRACTED_VERSION=$(echo "$DOCKERFILE_VERSION_LINE" | grep -oP '(?<=ENV BITCOIN_VERSION=)[0-9]+\.[0-9]+(\.[0-9]+)?')

          # Split the extracted version into major, minor, and patch variables
          IFS='.' read -r MAJOR MINOR PATCH <<< "$EXTRACTED_VERSION"

          # Output the extracted version parts
          echo "Extracted Bitcoin Version: $EXTRACTED_VERSION from dockerfile $DOCKERFILE_PATH"
          echo "Major Version: $MAJOR"
          echo "Minor Version: $MINOR"
          echo "Patch Version: ${PATCH:-0}"
          echo "Latest major version: $LATEST_BITCOIN_MAJOR_VERSION"

          # Add primary tags
          if [[ ${BITCOIN_VERSION} != *"alpine"* ]]; then
              # Non-alpine
              TAGS=("$REPO:${MAJOR}")
              TAGS+=("$REPO:${MAJOR}.${MINOR}")
              if [[ -n "$PATCH" && "$PATCH" -ne 0 ]]; then
                  TAGS+=("$REPO:${MAJOR}.${MINOR}.${PATCH}")
              fi
          else
              # alpine
              TAGS=("$REPO:${MAJOR}-alpine")
              TAGS+=("$REPO:${MAJOR}.${MINOR}-alpine")
              if [[ -n "$PATCH" && "$PATCH" -ne 0 ]]; then
                  TAGS+=("$REPO:${MAJOR}.${MINOR}.${PATCH}-alpine")
              fi
          fi

          # Add any "latest" tags
          if [[ ${MAJOR} -ge ${LATEST_BITCOIN_MAJOR_VERSION} ]]; then
          echo "Version ${MAJOR} is greater than or equal to ${LATEST_BITCOIN_MAJOR_VERSION}, tagging as latest"
              if [[ ${BITCOIN_VERSION} != *"alpine"* ]]; then
                TAGS+=("$REPO:latest")
              else
                TAGS+=("$REPO:alpine")
              fi
          fi

          if [[ $GITHUB_REF == "refs/heads/master" ]]; then
          PUSH=true
          fi

          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" | tee -a $GITHUB_OUTPUT
          echo "docker_platforms=${PLATFORMS}" | tee -a $GITHUB_OUTPUT
          echo "docker_username=bitcoin" | tee -a $GITHUB_OUTPUT
          echo "push=${PUSH}" | tee -a $GITHUB_OUTPUT
          echo "tags=${TAGS[@]}" | tee -a $GITHUB_OUTPUT

      - name: Login into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ steps.prepare.outputs.docker_username }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker image
        run: |
          TAGS=(${{ steps.prepare.outputs.tags }})

          echo "Build date: ${{ steps.prepare.outputs.build_date }}"
          echo "Docker platform: ${{ steps.prepare.outputs.docker_platforms }}"
          echo "Push: ${{ steps.prepare.outputs.push }}"
          echo "Tags: ${{ steps.prepare.outputs.tags }}"

          echo docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=${{steps.prepare.outputs.push}}" \
            --progress=plain \
            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            $(printf "%s" "${TAGS[@]/#/ --tag }" ) \
            ${{ matrix.version }}/

          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=${{steps.prepare.outputs.push}}" \
            --progress=plain \
            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            $(printf "%s" "${TAGS[@]/#/ --tag }" ) \
            ${{ matrix.version }}/
